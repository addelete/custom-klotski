package app

import (
	"encoding/json"
	"io/ioutil"
	"os/user"

	"github.com/addlete/custom-klotski/backend/models"
	"github.com/wailsapp/wails/v2/pkg/runtime"
)

type GameExportReq struct {
	NameFilter string `json:"nameFilter"`
	TagsFilter []uint `json:"tagsFilter"`
}

type ExportGameItem struct {
	Name      string   `json:"name"`
	Tags      []string `json:"tags"`
	GameShape string   `json:"gameShape"`
	Md5       string   `json:"md5"`
}

type ExportData struct {
	Author      string           `json:"author"`
	Email       string           `json:"email"`
	Name        string           `json:"name"`
	Description string           `json:"description"`
	AllTags     []string         `json:"allTags"`
	Games       []ExportGameItem `json:"games"`
}

type GameExportRes struct {
	Success    bool   `json:"success"`
	ErrMessage string `json:"errMessage"`
	Count      int    `json:"count"`
}

func (a *App) GameExport(req GameExportReq) GameExportRes {
	filename, err := runtime.SaveFileDialog(a.ctx, runtime.SaveDialogOptions{
		Title:           "Export Games",
		DefaultFilename: "custom-klotski.json",
	})
	if filename == "" || err != nil {
		return GameExportRes{
			Success: false,
		}
	}
	db := models.GetDB()
	var games []models.Game
	if req.NameFilter != "" {
		db = db.Where("name LIKE ?", "%"+req.NameFilter+"%")
	}
	if len(req.TagsFilter) > 0 {
		db = db.Where("id IN (SELECT game_id FROM game_tags WHERE tag_id IN (?))", req.TagsFilter)
	}
	db.Preload("Tags").Find(&games)

	current, _ := user.Current()
	exportData := ExportData{
		Name: "Custom Klotski Games",
		Description: "This is a list of custom klotski games.\n" +
			"The games are generated by the [Custom Klotski](https://github.com/addelete/custom-klotski).",
		Author: current.Username,
		Email:  "xxxx@xx.com",
	}

	var allTagsMap = make(map[string]bool)
	for _, game := range games {
		var tags []string
		for _, tag := range game.Tags {
			if _, ok := allTagsMap[tag.Name]; !ok {
				exportData.AllTags = append(exportData.AllTags, tag.Name)
				allTagsMap[tag.Name] = true
			}
			tags = append(tags, tag.Name)
		}
		exportData.Games = append(exportData.Games, ExportGameItem{
			Name:      game.Name,
			Tags:      tags,
			GameShape: game.GameShape,
			Md5:       game.Md5,
		})
	}

	data, _ := json.MarshalIndent(exportData, "", "  ")
	err = ioutil.WriteFile(filename, data, 0755)
	if err != nil {
		return GameExportRes{
			Success:    false,
			ErrMessage: "failedToSaveFile",
		}
	}
	return GameExportRes{
		Success: true,
		Count:   len(games),
	}
}
